[
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "foo\n\n foo ()"
  },
  {
    "objectID": "sieve.html",
    "href": "sieve.html",
    "title": "sieve",
    "section": "",
    "text": "primes = [p for p in sieve(17)]\ntest_eq(len(primes),7)\n\n\nsource\n\nsieve\n\n sieve (N=10)\n\nsieve of Eratosthenes"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev_sieve",
    "section": "",
    "text": "README file and the index of documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "nbdev_sieve",
    "section": "Install",
    "text": "Install\npip install nbdev_sieve"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev_sieve",
    "section": "How to use",
    "text": "How to use\nFor now only the sieve(N: int) generator can be called\n\nN = 17\nprimes = [p for p in sieve(N)]\nprint (primes)\n\n[2, 3, 5, 7, 11, 13]\n\n\n\n## Helper functions\ndef primes(N: int = 10):\n    \"get list of primes\"\n    return [p for p in sieve(N)]\n\ndef prime_count(om: int = 8):\n    \"#primes < 10^om\"\n    return {N: len(primes(N)) for o in range(1,om) if(N:=10**o)}\n\nπ = prime_count()\nπ\n\n{10: 4,\n 100: 25,\n 1000: 168,\n 10000: 1229,\n 100000: 9592,\n 1000000: 78498,\n 10000000: 664579}"
  }
]